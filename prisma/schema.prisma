datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  ORGANIZER
  JUDGE
  CONTESTANT
  AUDIENCE
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  role          UserRole     @default(ORGANIZER)
  createdAt     DateTime?    @default(now()) @map("created_at")
  updatedAt     DateTime?    @default(now()) @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  Contestant    Contestant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  name        String
  description String
  organizer   String
  type        String?
  category    String
  tags        String?
  banner      String?
  slug        String?      @unique
  eventStarts DateTime?    @map("event_start")
  eventEnds   DateTime?    @map("event_end")
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  contestants Contestant[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Contestant {
  id          String    @id @default(cuid())
  eventId     String    @map("event_id")
  userId      String    @map("user_id")
  firstName   String    @map("first_name")
  middleName  String?   @map("middle_name")
  lastName    String    @map("last_name")
  gender      String
  age         Int
  nationality String?
  birthDate   String?   @map("birth_date")
  phoneNumber String    @map("phone_number")
  email       String
  photo       String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contestants")
}
